#include "test_fixed_rand.h"

#include <array>
#include <cassert>

#include "dux_fixed.h"

using namespace dux;

void TestFRandGenerator() {
  FRandGenerator rg(42);

  // Tests that the same sequence is always produced, even with different
  // compilers/libraries.
  // Also test that copy works.
  for (int i = 0; i < 5000; i++) {
    rg.RandUInt32();
  }

  FRandGenerator rg2 = rg;
  assert(rg.RandUInt32() == 1301828430);
  assert(rg2.RandUInt32() == 1301828430);

  // Tests that the clamping works.
  for (int i = 0; i < 100; i++) {
    dux::FInt v =
        rg.RandFInt(dux::FInt::FromInt(1986), dux::FInt::FromInt(1987));
    assert(v >= dux::FInt::FromInt(1986));
    assert(v <= dux::FInt::FromInt(1987));

    v = rg.RandFInt(dux::FInt::FromInt(1986), dux::FInt::FromInt(1986));
    assert(v == dux::FInt::FromInt(1986));
  }

  // Tests that setting the seed works.
  rg.SetSeed(2019);
  FRandGenerator rg3(2019);
  assert(rg.RandUInt32() == rg3.RandUInt32());

  // Tests that float rand works.
  for (int i = 0; i < 1000; i++) {
    float v = rg.RandFloat(10);
    assert(v >= 0);
    assert(v <= 10);
  }
  while (rg.RandFloat(10) < 9.999) {
  }
  while (rg.RandFloat(10) > 0.001) {
  }

  // Test that the sequence is always the same for a given seed.
  FRandGenerator rg4(2020);
  std::array<int32_t, 600> expected_randoms_int_32 = {
      11,  12,  11,  14,  12,  13,  16,  18,  16,  13,  16,  14,  23,  11,
      15,  17,  17,  12,  10,  15,  29,  30,  28,  32,  30,  36,  17,  32,
      33,  10,  16,  10,  16,  23,  43,  30,  12,  32,  33,  39,  26,  30,
      15,  21,  32,  49,  14,  56,  49,  54,  21,  37,  41,  51,  18,  54,
      25,  15,  28,  38,  15,  61,  10,  47,  17,  65,  66,  64,  37,  38,
      49,  40,  33,  49,  75,  25,  75,  14,  61,  55,  77,  14,  60,  62,
      85,  19,  28,  83,  16,  93,  98,  32,  50,  71,  88,  72,  41,  23,
      50,  102, 47,  44,  108, 27,  98,  67,  83,  21,  85,  53,  69,  47,
      84,  42,  114, 70,  29,  36,  102, 120, 88,  76,  17,  109, 96,  104,
      14,  109, 130, 74,  119, 110, 101, 96,  66,  36,  19,  60,  129, 41,
      114, 46,  51,  69,  91,  38,  54,  37,  70,  13,  103, 100, 54,  99,
      47,  92,  81,  108, 94,  125, 162, 66,  98,  101, 148, 116, 119, 126,
      127, 24,  72,  33,  24,  92,  96,  140, 101, 30,  68,  127, 31,  114,
      156, 109, 165, 84,  186, 70,  173, 118, 129, 10,  112, 127, 54,  84,
      89,  32,  177, 160, 192, 207, 88,  74,  164, 69,  133, 24,  62,  24,
      56,  23,  209, 69,  12,  199, 111, 13,  97,  172, 156, 36,  34,  165,
      114, 135, 200, 172, 68,  133, 31,  112, 158, 104, 121, 240, 62,  81,
      117, 99,  222, 147, 94,  240, 172, 175, 93,  228, 128, 55,  28,  138,
      121, 93,  73,  110, 129, 236, 16,  163, 242, 255, 271, 69,  240, 245,
      114, 43,  235, 227, 231, 98,  204, 176, 57,  55,  56,  217, 147, 75,
      107, 277, 284, 85,  108, 81,  111, 253, 280, 125, 46,  61,  105, 268,
      129, 170, 293, 136, 305, 276, 251, 56,  74,  148, 97,  63,  81,  203,
      118, 100, 146, 175, 233, 45,  324, 106, 227, 71,  118, 208, 261, 98,
      60,  34,  195, 73,  239, 89,  267, 132, 220, 335, 177, 56,  141, 187,
      208, 25,  125, 270, 331, 328, 284, 217, 241, 275, 45,  224, 79,  280,
      68,  286, 159, 43,  335, 138, 219, 213, 240, 247, 308, 35,  76,  273,
      159, 37,  214, 21,  163, 201, 297, 151, 18,  288, 126, 172, 191, 176,
      290, 65,  128, 127, 200, 303, 325, 110, 348, 28,  38,  74,  268, 25,
      376, 265, 89,  26,  379, 116, 254, 279, 133, 266, 309, 145, 132, 303,
      83,  222, 261, 31,  245, 196, 119, 405, 217, 301, 284, 210, 202, 350,
      74,  172, 201, 276, 212, 246, 246, 27,  431, 69,  228, 237, 258, 40,
      413, 104, 223, 138, 377, 293, 298, 78,  340, 396, 193, 441, 61,  161,
      393, 279, 250, 320, 421, 201, 262, 324, 210, 20,  243, 285, 394, 180,
      114, 198, 133, 222, 402, 386, 256, 194, 61,  278, 170, 156, 298, 410,
      38,  252, 478, 443, 366, 143, 220, 66,  421, 454, 442, 190, 339, 249,
      11,  446, 154, 225, 309, 160, 163, 404, 353, 410, 40,  449, 304, 514,
      376, 498, 390, 12,  101, 223, 449, 313, 192, 117, 39,  519, 201, 505,
      213, 423, 299, 106, 330, 434, 83,  31,  30,  488, 503, 17,  276, 32,
      230, 438, 520, 467, 438, 13,  419, 85,  407, 150, 166, 302, 177, 282,
      212, 504, 349, 26,  478, 245, 308, 252, 64,  208, 290, 256, 559, 104,
      465, 71,  348, 450, 132, 97,  324, 374, 510, 434, 151, 131, 432, 229,
      238, 331, 289, 442, 235, 136, 311, 311, 241, 512, 567, 257, 224, 504,
      283, 35,  182, 146, 570, 123, 114, 424, 269, 87,  82,  591};
  int i = 0;
  for (int upper_range = 11; upper_range < 611; upper_range++) {
    assert(rg4.RandInt32(10, upper_range) == expected_randoms_int_32[i]);
    i++;
  }
  std::array<int64_t, 100> expected_randoms_int_64 = {
      3926844611619596746,  4959057963950369668,  6099203290527628701,
      1004779239066067364,  935606672541080196,   1226107919915861200,
      2956979411263484713,  2098350258211356491,  4489723673784099692,
      3238567443535810600,  3548299937279187037,  -962528674526961927,
      6279710918726606808,  4978280183880926961,  7313716056173304786,
      360789341921154189,   -1776951525657117182, -1884118079095472607,
      2987356622901865712,  -1495201489911154640, 4314825217491090577,
      4289975975243987117,  2927817698714003930,  4750252892492510543,
      3077299892596421361,  -1450698110673120903, 3016887556623710248,
      763634131458735007,   -78275939935454757,   4810998515520144526,
      -334528693637550835,  6124817852547423909,  7003677627136794077,
      2289896016700243046,  3722667304558100992,  6184266929573686522,
      2501618170298967300,  -1417808610753290958, 2613385453315123116,
      3411089345367384510,  3835677121284409389,  2776156600685898475,
      6186391586141985867,  -1708742416585282428, 3614411360731545083,
      -1017529864168359872, 6154429578718691420,  4378514602773102311,
      6608440415217043447,  2062372892402406104,  3221461254514601222,
      6403911854835341141,  4029968846000402737,  2359149594945108916,
      1442845082488804207,  3205786361471313006,  5774912408820599109,
      4192253875390996019,  1270179136925044150,  4998267550979688470,
      5628383317605775369,  4847137763007735122,  7033532606356979120,
      357710138667761765,   19491249778398051,    532095626038384174,
      3682287401028165318,  5469375688270737875,  -2035869105350301118,
      4427825797018427334,  5261029813272554981,  6275668506740130824,
      -1540290057846148774, 5222603495077439456,  6734504945962086041,
      4089516926322112272,  6503308605938667859,  7323250613360616907,
      2106948297656347265,  3401392581258577862,  3471897653212661823,
      -1658764822232550709, -1135140377647603573, 1605463249066690778,
      -2130575244718946435, -1791455895187756690, 5584312285858319374,
      2487375013357190913,  -64320798284487317,   7364917970812544246,
      6992450290891352418,  253199427880055984,   1133409775199245564,
      6273129542694391373,  2712602187421629462,  7199787894390058717,
      5032228151349677204,  4353782531767180407,  2089563064611070966,
      2395721125469993676};
  for (int j = 0; j < 100; j++) {
    assert(rg4.RandInt64(-0x2222222222222222, 0x6666666666666666) ==
           expected_randoms_int_64[j]);
  }
}
