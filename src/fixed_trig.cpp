#include "fixed_trig.h"

#include <array>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <vector>

namespace {

// Precomputed cos values between 0 and PI/2.
std::array<int16_t, 513> kCosTable = {
    4096, 4095, 4095, 4095, 4095, 4095, 4095, 4095, 4094, 4094, 4094, 4093,
    4093, 4092, 4092, 4091, 4091, 4090, 4089, 4089, 4088, 4087, 4086, 4085,
    4084, 4083, 4082, 4081, 4080, 4079, 4078, 4077, 4076, 4075, 4073, 4072,
    4071, 4069, 4068, 4066, 4065, 4063, 4062, 4060, 4058, 4057, 4055, 4053,
    4051, 4049, 4047, 4045, 4043, 4041, 4039, 4037, 4035, 4033, 4031, 4029,
    4026, 4024, 4022, 4019, 4017, 4014, 4012, 4009, 4007, 4004, 4001, 3999,
    3996, 3993, 3990, 3988, 3985, 3982, 3979, 3976, 3973, 3970, 3967, 3963,
    3960, 3957, 3954, 3950, 3947, 3944, 3940, 3937, 3933, 3930, 3926, 3923,
    3919, 3915, 3912, 3908, 3904, 3900, 3897, 3893, 3889, 3885, 3881, 3877,
    3873, 3869, 3864, 3860, 3856, 3852, 3848, 3843, 3839, 3834, 3830, 3826,
    3821, 3816, 3812, 3807, 3803, 3798, 3793, 3789, 3784, 3779, 3774, 3769,
    3764, 3759, 3754, 3749, 3744, 3739, 3734, 3729, 3723, 3718, 3713, 3708,
    3702, 3697, 3691, 3686, 3680, 3675, 3669, 3664, 3658, 3652, 3647, 3641,
    3635, 3629, 3624, 3618, 3612, 3606, 3600, 3594, 3588, 3582, 3576, 3570,
    3563, 3557, 3551, 3545, 3538, 3532, 3526, 3519, 3513, 3506, 3500, 3493,
    3487, 3480, 3473, 3467, 3460, 3453, 3447, 3440, 3433, 3426, 3419, 3412,
    3405, 3398, 3391, 3384, 3377, 3370, 3363, 3356, 3348, 3341, 3334, 3326,
    3319, 3312, 3304, 3297, 3289, 3282, 3274, 3267, 3259, 3252, 3244, 3236,
    3229, 3221, 3213, 3205, 3197, 3190, 3182, 3174, 3166, 3158, 3150, 3142,
    3134, 3126, 3117, 3109, 3101, 3093, 3085, 3076, 3068, 3060, 3051, 3043,
    3034, 3026, 3018, 3009, 3000, 2992, 2983, 2975, 2966, 2957, 2949, 2940,
    2931, 2922, 2914, 2905, 2896, 2887, 2878, 2869, 2860, 2851, 2842, 2833,
    2824, 2815, 2806, 2796, 2787, 2778, 2769, 2760, 2750, 2741, 2732, 2722,
    2713, 2703, 2694, 2684, 2675, 2665, 2656, 2646, 2637, 2627, 2617, 2608,
    2598, 2588, 2578, 2569, 2559, 2549, 2539, 2529, 2519, 2510, 2500, 2490,
    2480, 2470, 2460, 2450, 2439, 2429, 2419, 2409, 2399, 2389, 2379, 2368,
    2358, 2348, 2337, 2327, 2317, 2306, 2296, 2286, 2275, 2265, 2254, 2244,
    2233, 2223, 2212, 2201, 2191, 2180, 2170, 2159, 2148, 2138, 2127, 2116,
    2105, 2094, 2084, 2073, 2062, 2051, 2040, 2029, 2018, 2007, 1997, 1986,
    1975, 1964, 1952, 1941, 1930, 1919, 1908, 1897, 1886, 1875, 1864, 1852,
    1841, 1830, 1819, 1807, 1796, 1785, 1773, 1762, 1751, 1739, 1728, 1717,
    1705, 1694, 1682, 1671, 1659, 1648, 1636, 1625, 1613, 1602, 1590, 1579,
    1567, 1555, 1544, 1532, 1520, 1509, 1497, 1485, 1474, 1462, 1450, 1438,
    1427, 1415, 1403, 1391, 1379, 1368, 1356, 1344, 1332, 1320, 1308, 1296,
    1284, 1272, 1260, 1248, 1237, 1225, 1213, 1201, 1189, 1176, 1164, 1152,
    1140, 1128, 1116, 1104, 1092, 1080, 1068, 1056, 1043, 1031, 1019, 1007,
    995,  983,  970,  958,  946,  934,  921,  909,  897,  885,  872,  860,
    848,  836,  823,  811,  799,  786,  774,  762,  749,  737,  725,  712,
    700,  687,  675,  663,  650,  638,  625,  613,  601,  588,  576,  563,
    551,  538,  526,  513,  501,  488,  476,  463,  451,  438,  426,  413,
    401,  388,  376,  363,  351,  338,  326,  313,  301,  288,  276,  263,
    251,  238,  226,  213,  200,  188,  175,  163,  150,  138,  125,  113,
    100,  87,   75,   62,   50,   37,   25,   12,   0,
};

// Precomputed tan values between 0 and 2*PI.
std::array<int32_t, 512> kTanTable = {
    0,      12,     25,     37,     50,     62,     75,     87,      100,
    113,    125,    138,    150,    163,    176,    188,    201,     213,
    226,    239,    251,    264,    276,    289,    302,    314,     327,
    340,    352,    365,    378,    390,    403,    416,    428,     441,
    454,    466,    479,    492,    505,    517,    530,    543,     556,
    569,    581,    594,    607,    620,    633,    646,    659,     671,
    684,    697,    710,    723,    736,    749,    762,    775,     788,
    801,    814,    827,    840,    854,    867,    880,    893,     906,
    919,    932,    946,    959,    972,    986,    999,    1012,    1025,
    1039,   1052,   1066,   1079,   1093,   1106,   1119,   1133,    1147,
    1160,   1174,   1187,   1201,   1215,   1228,   1242,   1256,    1270,
    1283,   1297,   1311,   1325,   1339,   1353,   1367,   1381,    1395,
    1409,   1423,   1437,   1451,   1465,   1479,   1493,   1508,    1522,
    1536,   1551,   1565,   1580,   1594,   1608,   1623,   1638,    1652,
    1667,   1681,   1696,   1711,   1726,   1740,   1755,   1770,    1785,
    1800,   1815,   1830,   1845,   1860,   1876,   1891,   1906,    1921,
    1937,   1952,   1968,   1983,   1999,   2014,   2030,   2046,    2061,
    2077,   2093,   2109,   2125,   2141,   2157,   2173,   2189,    2205,
    2221,   2238,   2254,   2270,   2287,   2303,   2320,   2336,    2353,
    2370,   2387,   2404,   2421,   2437,   2455,   2472,   2489,    2506,
    2523,   2541,   2558,   2576,   2593,   2611,   2629,   2646,    2664,
    2682,   2700,   2718,   2736,   2755,   2773,   2791,   2810,    2828,
    2847,   2865,   2884,   2903,   2922,   2941,   2960,   2979,    2999,
    3018,   3037,   3057,   3076,   3096,   3116,   3136,   3156,    3176,
    3196,   3216,   3237,   3257,   3278,   3298,   3319,   3340,    3361,
    3382,   3403,   3425,   3446,   3467,   3489,   3511,   3533,    3555,
    3577,   3599,   3621,   3644,   3666,   3689,   3712,   3735,    3758,
    3781,   3804,   3828,   3852,   3875,   3899,   3923,   3947,    3972,
    3996,   4021,   4046,   4070,   4096,   4121,   4146,   4172,    4197,
    4223,   4249,   4275,   4302,   4328,   4355,   4382,   4409,    4436,
    4463,   4491,   4519,   4547,   4575,   4603,   4632,   4660,    4689,
    4719,   4748,   4777,   4807,   4837,   4867,   4898,   4929,    4959,
    4990,   5022,   5053,   5085,   5117,   5150,   5182,   5215,    5248,
    5281,   5315,   5349,   5383,   5417,   5452,   5487,   5522,    5558,
    5594,   5630,   5666,   5703,   5740,   5778,   5815,   5853,    5892,
    5931,   5970,   6009,   6049,   6089,   6130,   6170,   6212,    6253,
    6296,   6338,   6381,   6424,   6468,   6512,   6556,   6601,    6647,
    6693,   6739,   6786,   6833,   6881,   6929,   6978,   7027,    7077,
    7128,   7179,   7230,   7282,   7335,   7388,   7441,   7496,    7551,
    7606,   7663,   7719,   7777,   7835,   7894,   7954,   8014,    8075,
    8137,   8199,   8263,   8327,   8392,   8457,   8524,   8591,    8660,
    8729,   8799,   8870,   8942,   9015,   9089,   9164,   9240,    9317,
    9395,   9474,   9555,   9636,   9719,   9803,   9888,   9975,    10062,
    10151,  10242,  10334,  10427,  10522,  10618,  10716,  10815,   10916,
    11019,  11123,  11229,  11337,  11447,  11559,  11672,  11788,   11906,
    12026,  12147,  12272,  12398,  12527,  12659,  12792,  12929,   13068,
    13210,  13355,  13502,  13653,  13807,  13964,  14124,  14288,   14455,
    14626,  14801,  14979,  15162,  15349,  15540,  15736,  15936,   16141,
    16352,  16567,  16788,  17015,  17247,  17485,  17730,  17982,   18240,
    18505,  18778,  19059,  19347,  19645,  19951,  20266,  20591,   20927,
    21273,  21630,  21999,  22380,  22775,  23183,  23605,  24043,   24497,
    24967,  25456,  25964,  26491,  27041,  27612,  28208,  28830,   29479,
    30158,  30868,  31611,  32391,  33209,  34069,  34974,  35928,   36934,
    37998,  39124,  40318,  41587,  42937,  44377,  45916,  47564,   49334,
    51240,  53298,  55528,  57950,  60593,  63487,  66670,  70188,   74096,
    78463,  83376,  88943,  95304,  102644, 111207, 121325, 133466,  148305,
    166852, 190697, 222489, 266996, 333755, 445017, 667538, 1335099,
};

int32_t SearchValueInTanTable(int32_t value) {
  int32_t lowerBound = 0;
  int32_t higherBound = kTanTable.size() - 1;
  assert(value >= 0);
  if (value <= kTanTable[lowerBound])
    return lowerBound;
  if (value >= kTanTable[higherBound])
    return higherBound;
  while (higherBound - lowerBound > 1) {
    int32_t index = (higherBound + lowerBound) / 2;
    int32_t valueInTheCenter = kTanTable[index];
    if (valueInTheCenter > value) {
      higherBound = index;
    } else {
      if (valueInTheCenter < value) {
        lowerBound = index;
      } else {
        return index;
      }
    }
  }
  return lowerBound;
}

// Normalizes |angle| between 0 and 2*PI.
void NormalizeAngle(dux::FInt& angle) {
  if (angle < dux::FInt(0)) {
    angle = (-angle) % dux::FInt::kTwoPi;
    angle = dux::FInt::kTwoPi - angle;
  } else if (angle > dux::FInt::kTwoPi) {
    angle %= dux::FInt::kTwoPi;
  }
}

}  // namespace

namespace dux {

namespace trig {

FInt Cos(FInt angle) {
  NormalizeAngle(angle);

  if (angle < FInt::kPi) {
    if (angle < FInt::kHalfPi) {
      return FInt::FromRawValue(
          kCosTable[((angle * 512) / FInt::kHalfPi).Round().Int32()]);
    } else {
      angle = FInt::kPi - angle;
      return FInt::FromRawValue(
          -kCosTable[((angle * 512) / FInt::kHalfPi).Round().Int32()]);
    }
  } else {
    if (angle < FInt::kPi + FInt::kHalfPi) {
      angle -= FInt::kPi;
      return FInt::FromRawValue(
          -kCosTable[((angle * 512) / FInt::kHalfPi).Round().Int32()]);
    } else {
      angle = FInt::kTwoPi - angle;
      return FInt::FromRawValue(
          kCosTable[((angle * 512) / FInt::kHalfPi).Round().Int32()]);
    }
  }
}

FInt Sin(FInt angle) {
  return Cos(FInt::kHalfPi - angle);
}

void Sincos(FInt angle, FInt& sin, FInt& cos) {
  NormalizeAngle(angle);

  if (angle < FInt::kPi) {
    if (angle < FInt::kHalfPi) {
      int index = ((angle * 512) / FInt::kHalfPi).Round().Int32();
      assert(index >= 0 && index <= 512);
      cos = FInt::FromRawValue(kCosTable[index]);
      sin = FInt::FromRawValue(kCosTable[512 - index]);
    } else {
      angle = FInt::kPi - angle;
      int index = ((angle * 512) / FInt::kHalfPi).Round().Int32();
      assert(index >= 0 && index <= 512);
      cos = FInt::FromRawValue(-kCosTable[index]);
      sin = FInt::FromRawValue(kCosTable[512 - index]);
    }
  } else {
    if (angle < FInt::kPi + FInt::kHalfPi) {
      angle -= FInt::kPi;
      int index = ((angle * 512) / FInt::kHalfPi).Round().Int32();
      assert(index >= 0 && index <= 512);
      cos = FInt::FromRawValue(-kCosTable[index]);
      sin = FInt::FromRawValue(-kCosTable[512 - index]);
    } else {
      angle = FInt::kTwoPi - angle;
      int index = ((angle * 512) / FInt::kHalfPi).Round().Int32();
      assert(index >= 0 && index <= 512);
      cos = FInt::FromRawValue(kCosTable[index]);
      sin = FInt::FromRawValue(-kCosTable[512 - index]);
    }
  }
}

FInt Atan2(FInt y, FInt x) {
  if (x.raw_value_ == 0) {
    if (y.raw_value_ > 0) {
      return FInt::kHalfPi;
    } else {
      return -FInt::kHalfPi;
    }
  }
  int32_t d = static_cast<uint32_t>((y / x).raw_value_);
  d = std::abs(d);
  FInt angle = FInt::kHalfPi * FInt(SearchValueInTanTable(d));
  angle >>= 9;
  if (y.raw_value_ > 0) {
    if (x.raw_value_ > 0) {
      return angle;
    } else {
      return FInt::kPi - angle;
    }
  } else {
    if (x.raw_value_ > 0) {
      return -angle;
    } else {
      return -FInt::kPi + angle;
    }
  }
  return FInt::FromRawValue(0);
}

void GenerateLookupTables() {
  std::vector<FInt> cosTable;
  std::vector<FInt> tanTable;

  for (int i = 0; i < 513; i++) {
    float angle = i * (M_PI / 1024);
    cosTable.push_back(FInt::FromDouble(std::cos(angle)));
  }
  for (int i = 0; i < 512; i++) {
    float angle = i * (2 * M_PI / 512);
    tanTable.push_back(FInt::FromDouble(std::tan(angle / 4)));
  }

  printf("// Precomputed cos values between 0 and PI/2.\n");
  printf("std::array<int16_t, 513> kCosTable = {\n");
  for (FInt& v : cosTable) {
    printf("%lli,\n", v.raw_value_);
  }
  printf("};\n");

  printf("// Precomputed tan values between 0 and 2*PI.\n");
  printf("std::array<int32_t, 512> kTanTable = {\n");
  for (FInt& v : tanTable) {
    printf("%lli,\n", v.raw_value_);
  }
  printf("};\n");
}

}  // namespace trig

}  // namespace dux
